# Generated by Django 3.1.14 on 2022-03-08 00:11

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=13, unique=True, validators=[django.core.validators.RegexValidator('^010-?[1-9]\\d{3}-?\\d{4}$')])),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
                'ordering': ['-id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('code', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=16)),
            ],
            options={
                'db_table': 'address',
                'ordering': ['-code'],
            },
        ),
        migrations.CreateModel(
            name='Crop',
            fields=[
                ('code', models.CharField(max_length=8, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=16)),
            ],
            options={
                'db_table': 'crop',
                'ordering': ['-code'],
            },
        ),
        migrations.CreateModel(
            name='Farm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.ForeignKey(db_column='large_category_address_code', null=True, on_delete=django.db.models.deletion.SET_NULL, to='forecasting.address')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='farm_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'farm',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='ProducingCrop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_in_house', models.BooleanField(default=False)),
                ('crop', models.ForeignKey(db_column='crop_code', on_delete=django.db.models.deletion.CASCADE, related_name='producing_crop_set', to='forecasting.crop')),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='producing_crop_set', to='forecasting.farm')),
            ],
            options={
                'db_table': 'producing_crop',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Forecasting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True)),
                ('target', models.CharField(blank=True, max_length=16)),
                ('address', models.ForeignKey(db_column='address_code', null=True, on_delete=django.db.models.deletion.SET_NULL, to='forecasting.address')),
                ('crop', models.ForeignKey(db_column='crop_code', on_delete=django.db.models.deletion.CASCADE, to='forecasting.crop')),
            ],
            options={
                'db_table': 'forecasting',
                'ordering': ['-id'],
            },
        ),
    ]
